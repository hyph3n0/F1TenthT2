/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.25
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 9 "ros_pluginlib_plugin_provider_for_plugin_providers.sip"
#include <qt_gui_cpp/ros_pluginlib_plugin_provider_for_plugin_providers.h>
#line 12 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"

#line 27 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 7 "plugin_provider.sip"
#include <qt_gui_cpp/plugin_provider.h>
#line 19 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 7 "plugin_context.sip"
#include <qt_gui_cpp/plugin_context.h>
#line 22 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 8 "plugin.sip"
#include <qt_gui_cpp/plugin.h>
#line 25 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 149 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 7 "plugin_descriptor.sip"
#include <qt_gui_cpp/plugin_descriptor.h>
#line 31 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 28 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobject.sip"
#include <qobject.h>
#line 34 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 27 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 37 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 42 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 247 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 235 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 38 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 30 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 149 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"
#line 26 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"


class sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders : public  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders
{
public:
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(const  ::QString&,const  ::QString&);
    virtual ~sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qt_gui_cpp::PluginProvider* load_explicit_type(const  ::QString&, ::qt_gui_cpp::PluginContext*) SIP_OVERRIDE;
    QMap< ::QString, ::QString> discover( ::QObject*) SIP_OVERRIDE;
    QList< ::qt_gui_cpp::PluginDescriptor*> discover_descriptors( ::QObject*) SIP_OVERRIDE;
    void* load(const  ::QString&, ::qt_gui_cpp::PluginContext*) SIP_OVERRIDE;
     ::qt_gui_cpp::Plugin* load_plugin(const  ::QString&, ::qt_gui_cpp::PluginContext*) SIP_OVERRIDE;
    void unload(void*) SIP_OVERRIDE;
    void unload_plugin( ::qt_gui_cpp::Plugin*) SIP_OVERRIDE;
    void shutdown() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders &);
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders &operator = (const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders &);

    char sipPyMethods[15];
};

sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(const  ::QString& a0,const  ::QString& a1):  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::~sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_libqt_gui_cpp_sip_qt_metaobject(sipPySelf,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders);

    return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::metaObject();
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_libqt_gui_cpp_sip_qt_metacall(sipPySelf,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_libqt_gui_cpp_sip_qt_metacast(sipPySelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, _clname, &sipCpp) ? sipCpp :  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::qt_metacast(_clname));
}

 ::qt_gui_cpp::PluginProvider* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::load_explicit_type(const  ::QString& a0, ::qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_load_explicit_type);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load_explicit_type(a0,a1);

    extern  ::qt_gui_cpp::PluginProvider* sipVH_libqt_gui_cpp_sip_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_17(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

QMap< ::QString, ::QString> sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::discover( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_discover);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::discover(a0);

    extern QMap< ::QString, ::QString> sipVH_libqt_gui_cpp_sip_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_libqt_gui_cpp_sip_0(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

QList< ::qt_gui_cpp::PluginDescriptor*> sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::discover_descriptors( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_discover_descriptors);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::discover_descriptors(a0);

    extern QList< ::qt_gui_cpp::PluginDescriptor*> sipVH_libqt_gui_cpp_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_libqt_gui_cpp_sip_1(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::load(const  ::QString& a0, ::qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_load);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load(a0,a1);

    extern void* sipVH_libqt_gui_cpp_sip_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_2(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qt_gui_cpp::Plugin* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::load_plugin(const  ::QString& a0, ::qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_load_plugin);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load_plugin(a0,a1);

    extern  ::qt_gui_cpp::Plugin* sipVH_libqt_gui_cpp_sip_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_3(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::unload(void*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_unload);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::unload(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, void*);

    sipVH_libqt_gui_cpp_sip_4(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::unload_plugin( ::qt_gui_cpp::Plugin*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_unload_plugin);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::unload_plugin(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qt_gui_cpp::Plugin*);

    sipVH_libqt_gui_cpp_sip_5(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::shutdown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_shutdown);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::shutdown();
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_libqt_gui_cpp_sip_6(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::event(a0);

    extern bool sipVH_libqt_gui_cpp_sip_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_libqt_gui_cpp_sip_13(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::eventFilter(a0,a1);

    extern bool sipVH_libqt_gui_cpp_sip_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_libqt_gui_cpp_sip_12(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::timerEvent(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_libqt_gui_cpp_sip_11(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::childEvent(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_libqt_gui_cpp_sip_10(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::customEvent(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_libqt_gui_cpp_sip_9(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::connectNotify(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_libqt_gui_cpp_sip_8(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::disconnectNotify(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_libqt_gui_cpp_sip_8(sipGILState, sipImportedVirtErrorHandlers_libqt_gui_cpp_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_sender(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 570 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 516 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_sender, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_receivers(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 601 "/usr/lib/python3/dist-packages/PyQt5/bindings/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 572 "/home/f1tenthteam2/pleasework/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPluginProviders.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_receivers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_timerEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_childEvent(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_childEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_customEvent(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_customEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_connectNotify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_disconnectNotify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_senderSignalIndex(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_senderSignalIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_isSignalConnected(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod* a0;
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_isSignalConnected, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_create_instance(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_create_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders*sipRes;

            sipRes =  ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::create_instance(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_create_instance, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QObject, &a0))
        {
            QMap< ::QString, ::QString>*sipRes;

            sipRes = new QMap< ::QString, ::QString>((sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::discover(a0) : sipCpp->discover(a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_discover, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover_descriptors(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover_descriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QObject, &a0))
        {
            QList< ::qt_gui_cpp::PluginDescriptor*>*sipRes;

            sipRes = new QList< ::qt_gui_cpp::PluginDescriptor*>((sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::discover_descriptors(a0) : sipCpp->discover_descriptors(a0)));

            return sipConvertFromNewType(sipRes,sipType_QList_0101qt_gui_cpp_PluginDescriptor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_discover_descriptors, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qt_gui_cpp::PluginContext* a1;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            void*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load(*a0,a1) : sipCpp->load(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_load, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qt_gui_cpp::PluginContext* a1;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
             ::qt_gui_cpp::Plugin*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load_plugin(*a0,a1) : sipCpp->load_plugin(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_Plugin,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_load_plugin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_explicit_type(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_explicit_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qt_gui_cpp::PluginContext* a1;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
             ::qt_gui_cpp::PluginProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::load_explicit_type(*a0,a1) : sipCpp->load_explicit_type(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_PluginProvider,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_load_explicit_type, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_unload(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        void* a0;
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::unload(a0) : sipCpp->unload(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_unload, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_shutdown(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_shutdown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::shutdown() : sipCpp->shutdown());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPluginProviders, sipName_shutdown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(void *, const sipTypeDef *);}
static void *cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(void *sipCppV, const sipTypeDef *targetType)
{
     ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp = reinterpret_cast< ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_qt_gui_cpp_PluginProvider)
        return static_cast< ::qt_gui_cpp::PluginProvider *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(void *, int);}
static void release_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(void *sipCppV, int)
{
     ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *sipCpp = reinterpret_cast< ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(sipSimpleWrapper *);}
static void dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp = new sipqt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders[] = {{3, 0, 0}, {10, 255, 1}};


static PyMethodDef methods_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_childEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_connectNotify, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_create_instance), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_create_instance, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_customEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_disconnectNotify, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_discover), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_discover_descriptors), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_discover_descriptors, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_isSignalConnected, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load_explicit_type), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_explicit_type, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load_plugin), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_load_plugin, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_receivers), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_receivers, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_sender), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_sender, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_senderSignalIndex, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_shutdown), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_shutdown, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_timerEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_unload), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders_unload, METH_VARARGS, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders = {
    & ::qt_gui_cpp::RosPluginlibPluginProvider_ForPluginProviders::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_libqt_gui_cpp_sip_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_qt_gui_cpp__RosPluginlibPluginProvider_ForPluginProviders,
        {SIP_NULLPTR},
        &plugin_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders
    },
    {
        sipNameNr_RosPluginlibPluginProvider_ForPluginProviders,
        {3, 255, 0},
        17, methods_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
    SIP_NULLPTR,
    init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
    cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPluginProviders,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
